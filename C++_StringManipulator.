#include <iostream>
#include <vector>
#include <string>
#include <fstream>

// Task class to represent each to-do item
class Task {
private:
    std::string description;
    bool isCompleted;

public:
    Task(std::string desc) : description(desc), isCompleted(false) {}

    void markComplete() {
        isCompleted = true;
    }

    std::string getDescription() const {
        return description;
    }

    bool getStatus() const {
        return isCompleted;
    }
};

// Function to display all tasks
void displayTasks(const std::vector<Task>& tasks) {
    std::cout << "Your To-Do List:\n";
    for (size_t i = 0; i < tasks.size(); ++i) {
        std::cout << i + 1 << ". " << tasks[i].getDescription() 
                  << (tasks[i].getStatus() ? " [Completed]" : " [Pending]") << "\n";
    }
}

// Function to save tasks to a file
void saveTasksToFile(const std::vector<Task>& tasks, const std::string& filename) {
    std::ofstream file(filename);
    if (file.is_open()) {
        for (const auto& task : tasks) {
            file << task.getDescription() << (task.getStatus() ? " [Completed]\n" : " [Pending]\n");
        }
        std::cout << "Tasks saved to " << filename << "\n";
        file.close();
    } else {
        std::cerr << "Error opening file for writing.\n";
    }
}

// Function to load tasks from a file
std::vector<Task> loadTasksFromFile(const std::string& filename) {
    std::vector<Task> tasks;
    std::ifstream file(filename);
    std::string line;
    if (file.is_open()) {
        while (std::getline(file, line)) {
            Task task(line);
            tasks.push_back(task);
        }
        std::cout << "Tasks loaded from " << filename << "\n";
        file.close();
    } else {
        std::cerr << "Error opening file for reading.\n";
    }
    return tasks;
}

int main() {
    std::vector<Task> tasks;
    int choice;

    while (true) {
        std::cout << "\nMenu:\n";
        std::cout << "1. Add a task\n";
        std::cout << "2. Mark a task as complete\n";
        std::cout << "3. Display all tasks\n";
        std::cout << "4. Save tasks to file\n";
        std::cout << "5. Load tasks from file\n";
        std::cout << "6. Exit\n";
        std::cout << "Enter your choice: ";
        std::cin >> choice;
        std::cin.ignore(); // To ignore newline character after input

        if (choice == 6) {
            break;
        }

        switch (choice) {
            case 1: {
                std::string taskDesc;
                std::cout << "Enter task description: ";
                std::getline(std::cin, taskDesc);
                tasks.push_back(Task(taskDesc));
                break;
            }
            case 2: {
                int taskNum;
                std::cout << "Enter task number to mark complete: ";
                std::cin >> taskNum;
                if (taskNum > 0 && taskNum <= tasks.size()) {
                    tasks[taskNum - 1].markComplete();
                    std::cout << "Task marked as complete.\n";
                } else {
                    std::cout << "Invalid task number.\n";
                }
                break;
            }
            case 3:
                displayTasks(tasks);
                break;
            case 4:
                saveTasksToFile(tasks, "tasks.txt");
                break;
            case 5:
                tasks = loadTasksFromFile("tasks.txt");
                break;
            default:
                std::cout << "Invalid choice.\n";
        }
    }

    return 0;
}
